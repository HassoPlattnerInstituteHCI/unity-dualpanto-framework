//// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel Render

float decayRate = 1;
float diffuseRate = 1;
int width = 512;
int height = 256;
RWTexture2D<float4> Result;

float x;
float y;
float last_x;
float last_y;
bool moving;

float Line( float2 p, float2 a, float2 b )
{
    float2 pa = p-a, ba = b-a;
    float h = saturate( dot(pa,ba)/dot(ba,ba) );
    float2 d = pa - ba * h;
    return dot(d, d);
}

float ease_in_quad(float x) {
	float t = x; float b = 0; float c = 1; float d = 1;
	return c*(t/=d)*t + b;
}

[numthreads(8,8,1)]
void Render (uint3 id : SV_DispatchThreadID)
{
	float4 originalCol = Result[id.xy];
	float4 finalCol = originalCol;
	if (moving) {
		float2 uv = float2((float) id.x / width, (float) id.y / height);
		float k = Line(uv, float2(x, y), float2(last_x, last_y));  
		float thickness = 0.00001;
		finalCol += lerp(float4(1,1,1,1), float4(0,0,0,0), smoothstep(0.0, thickness, k));
	}

	float4 sum = 0;
	int kernelSize = 2;
	for (int offsetX = -kernelSize; offsetX <= kernelSize; offsetX++) {
		for (int offsetY = -kernelSize; offsetY <= kernelSize; offsetY++) {
			int sampleX = min(width-1, max(0, id.x + offsetX));
			int sampleY = min(height-1, max(0, id.y + offsetY));
			sum += Result[int2(sampleX,sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	finalCol = lerp(finalCol, blurredCol, 0);
	finalCol = float4(finalCol.rgb, max(0, finalCol.a - 0.01));
	Result[id.xy] = finalCol;
}
